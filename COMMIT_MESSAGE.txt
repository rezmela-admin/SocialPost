feat(archive, workflow, ui): archive posted content, honor edited prompts, improve readability and config flow

Summary
- Add archive mode and organize posted assets for reuse (image/PDF + metadata) under a dated/profiled folder tree.
- Fix approval loop so edited prompts actually regenerate images before approval.
- Make prompt builder panel-aware (avoid multi-panel phrasing for single-panel profiles).
- Enforce legible speech text (large, bold, high-contrast; fully visible, not cut off).
- Respect watermark position from config.
- Show accurate logged-in status; extend cleanup to cover final-comic assets.
- Prefer sessionState-driven config in image providers; remove module-level config reads and process exits.
- Reuse one Playwright browser per job (separate contexts per platform) to speed multi-platform posting.
- Update documentation to reflect new flows and archive.

Details
- Archive mode (default now):
  - After successful posting, assets are moved to `postProcessing.archiveFolderPath` (default `./post_archive`).
  - Structure: `./post_archive/YYYY/MM/DD/<profile>/<jobId>_<topic-slug>/`
    - `image.png|jpg` (posted image)
    - `image.pdf` (optional, if exported)
    - `metadata.json` (topic, summary, platforms, timestamps, status, errors)
  - Config: `postProcessing.actionAfterSuccess = "archive"`, `archiveFolderPath` added.

- Approval-driven image generation loop:
  - On “Edit Prompt”, the edited prompt is used for regeneration; on “Retry”, a fresh variation is generated; “Cancel” aborts cleanly.

- Prompt building and readability:
  - `buildTaskPrompt` adds multi-panel guidance only if `expectedPanelCount` exists (or profile task explicitly says N-panel).
  - Speech bubbles include legibility directive: large, bold, high-contrast lettering, mobile-readable, fully visible.

- UI cleanup & status:
  - Cleanup now removes `final-comic-*` in addition to `post-image-*` and `comic-strip-*`.
  - Bluesky logged-in detection prefers env (`BLUESKY_HANDLE`/`BLUESKY_APP_PASSWORD`) with file fallback.

- Watermark position:
  - Honors `imageWatermarking.position` (top/bottom-left/right, center variants) via sharp gravity mapping.

- Provider/factory configuration:
  - Image factory relies on `sessionState` only; removed module-level `config.json` read and `process.exit` from library code.
  - Providers log via shared `utils.debugLog(sessionState, ...)`.

- Worker efficiency:
  - Reuse a single Chromium browser per job; create per-platform contexts using each platform’s storage state.

- Docs:
  - `docs/app-map.md` updated with the approval loop, provider/config flow, watermark position, and archive mode.

Config changes
- `config.json`
  - `debug.preserveTemporaryFiles: false` (allow post-processing like archive to run)
  - `postProcessing.actionAfterSuccess: "archive"`
  - `postProcessing.archiveFolderPath: "./post_archive"`

Files changed
- docs/app-map.md (added, updated)
- src/lib/utils.js
- src/lib/workflows.js
- src/lib/ui/menu.js
- src/lib/image-processor.js
- src/lib/image-generators/index.js
- src/lib/image-generators/openai-provider.js
- src/lib/image-generators/gemini-provider.js
- worker.js
- config.json

Notes
- Posting behavior is unchanged, except that successful posts are archived by default instead of deleted.
- You can switch back to `backup` or `delete` via `config.json -> postProcessing.actionAfterSuccess`.

